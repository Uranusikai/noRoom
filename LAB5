#include <avr/io.h>




//** GLOBAL VARIABLES **/
int main(void)

{

	DDRD = 0b11110111;// Make OC0A (PD5) and OC0B (PD6) output bits -- these are the PWM pins;

	DDRC =  0b11111110;  // define all Port C bits as input

	PORTC = 0b11111111;

	OCR0A = 0x00;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)

	TCCR0A = 1<<COM0A1 | 0<<COM0A0 | 1<<WGM01 | 1<<WGM00;      // Set non-inverting mode on OC0A pin (COMA1:0 = 10; Fast PWM (WGM1:0 bits = bits 1:0 = 11) (Note that we are not affecting OC0B because COMB0:1 bits stay at default = 00)

	TCCR0B = 0<<CS02 | 1<<CS01 | 1<<CS00; // Set base PWM frequency (CS02:0 - bits 2-0 = 011 for prescaler of 64, for approximately 1kHz base frequency)

	// PWM is now running on selected pin at selected base frequency.  Duty cycle is set by loading/changing value in OCR0A register.

	

	PRR = 0x00;  // clear Power Reduction ADC bit (0) in PRR register

	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;  // 0x87 // 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)

	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR|0<<MUX3|1<<MUX2|0<<MUX1|1<<MUX0; //0x60; // 0b01100000  // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),

	//left justification (bit 5 of ADMUX = ADLAR = 1);

	//and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)

	/* Replace with your application code */


	while(1)

	{
		// Read analog input

		ADCSRA |= (1<<ADSC); // Start conversion



		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
                   char sensorvalue = ADCH;

                   
		

		if ( sensorvalue < 0b01100010){
                             if(PIND & 0b00001000){
								 PORTC = 0b11111101;	// an individual bit without changing the other bits in  PC0
	                             OCR0A = 0xFF;
	                             PORTD = 0b11111101;
	                          }
							  else{
	                             PORTC = 0b11111011;	// an individual bit without changing the other bits in  PC0
	                            OCR0A = 0x100;
	                            PORTD = 0b11111101;
                              }
		}
		else if (( sensorvalue <= 0b10001010)  & (sensorvalue > 0b01100010))
                        {
							if(PIND & 0b00001000)
							 {
	                             PORTC = 0b11111011;
	                             OCR0A = 0x100;
	                             PORTD = 0b11111101;
	                             }
								 else{
	                             PORTC = 0b11110111;
	                             OCR0A = 0x00;
	                             PORTD = 0b11111100;
                             }
						}
		else if ((sensorvalue <= 0b10110001) & (sensorvalue > 0b10001010))
							{

								PORTC = 0b11110111;
								OCR0A = 0x00;
								PORTD = 0b11111100;
							}
		else if ((sensorvalue <= 0b11011000) & (sensorvalue > 0b10110001))
						{
							 if(PIND & 0b00001000){
								 PORTC = 0b11101111;
								 OCR0A = 0x100;
								 PORTD = 0b11111110;
								 }
								 else
								 {
								 PORTC = 0b11110111;
								 OCR0A = 0x00;
								 PORTD = 0b11111100;

								}
							}
		else if (sensorvalue > 0b11011000){
                             if(PIND & 0b00001000){
	                             PORTC = 0b11011111;
	                             OCR0A = 0xFF;
	                             PORTD = 0b11111110;
	                             }
								 else
								 {
	                             PORTC = 0b11101111;
	                             OCR0A = 0x100;
	                             PORTD = 0b11111110;
                             }
							}
	} // end main while



} // end main
